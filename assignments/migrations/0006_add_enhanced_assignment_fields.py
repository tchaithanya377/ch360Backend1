# Generated by Django 5.1.4 on 2025-09-16 00:59

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('academics', '0005_alter_coursesection_options_and_more'),
        ('assignments', '0005_auto_20250916_0621'),
        ('departments', '0002_initial'),
        ('students', '0019_add_missing_fields_to_caste'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='assignment',
            name='assignment_type',
            field=models.CharField(choices=[('HOMEWORK', 'Homework'), ('PROJECT', 'Project'), ('LAB_ASSIGNMENT', 'Lab Assignment'), ('RESEARCH_PAPER', 'Research Paper'), ('PRESENTATION', 'Presentation'), ('QUIZ', 'Quiz'), ('EXAM', 'Exam'), ('PEER_REVIEW', 'Peer Review'), ('PORTFOLIO', 'Portfolio'), ('FIELD_WORK', 'Field Work')], default='HOMEWORK', max_length=20),
        ),
        migrations.AddField(
            model_name='assignment',
            name='difficulty_level',
            field=models.CharField(choices=[('BEGINNER', 'Beginner'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced'), ('EXPERT', 'Expert')], default='INTERMEDIATE', max_length=15),
        ),
        migrations.AddField(
            model_name='assignment',
            name='enable_peer_review',
            field=models.BooleanField(default=False, help_text='Enable peer review for this assignment'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='estimated_time_hours',
            field=models.PositiveIntegerField(default=2, help_text='Estimated time to complete in hours'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='is_apaar_compliant',
            field=models.BooleanField(default=True, help_text='Compliant with AP Academic Assessment and Accreditation Requirements'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='late_penalty_percentage',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Percentage penalty for late submissions (0-100)', max_digits=5),
        ),
        migrations.AddField(
            model_name='assignment',
            name='learning_objectives',
            field=models.TextField(blank=True, help_text='Learning objectives for this assignment', null=True),
        ),
        migrations.AddField(
            model_name='assignment',
            name='peer_review_weight',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Weight of peer review in final grade (0-100)', max_digits=5),
        ),
        migrations.AddField(
            model_name='assignment',
            name='plagiarism_threshold',
            field=models.DecimalField(decimal_places=2, default=15.0, help_text='Maximum allowed similarity percentage (0-100)', max_digits=5),
        ),
        migrations.AddField(
            model_name='assignment',
            name='requires_plagiarism_check',
            field=models.BooleanField(default=True, help_text='Requires plagiarism detection check'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='submission_reminder_days',
            field=models.PositiveIntegerField(default=1, help_text='Days before due date to send reminder'),
        ),
        migrations.CreateModel(
            name='AssignmentAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_expected_submissions', models.PositiveIntegerField(default=0)),
                ('actual_submissions', models.PositiveIntegerField(default=0)),
                ('submission_rate', models.DecimalField(decimal_places=2, default=0, help_text='Submission rate percentage', max_digits=5)),
                ('average_grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('median_grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grade_distribution', models.JSONField(default=dict, help_text='Distribution of grades across different ranges')),
                ('average_submission_time', models.DurationField(blank=True, help_text='Average time taken to submit after assignment creation', null=True)),
                ('late_submission_rate', models.DecimalField(decimal_places=2, default=0, help_text='Percentage of late submissions', max_digits=5)),
                ('outcome_achievement', models.JSONField(default=dict, help_text='Achievement rates for each learning outcome')),
                ('plagiarism_rate', models.DecimalField(decimal_places=2, default=0, help_text='Percentage of submissions flagged for plagiarism', max_digits=5)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('assignment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='assignments.assignment')),
            ],
            options={
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentPlagiarismCheck',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CLEAN', 'No Plagiarism Detected'), ('SUSPICIOUS', 'Suspicious Content'), ('PLAGIARIZED', 'Plagiarism Detected')], default='PENDING', max_length=15)),
                ('similarity_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of similarity detected', max_digits=5, null=True)),
                ('sources', models.JSONField(default=list, help_text='List of potential sources with similarity percentages')),
                ('checked_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('checked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plagiarism_checks', to=settings.AUTH_USER_MODEL)),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='plagiarism_check', to='assignments.assignmentsubmission')),
            ],
            options={
                'ordering': ['-checked_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentRubric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('rubric_type', models.CharField(choices=[('ANALYTIC', 'Analytic Rubric'), ('HOLISTIC', 'Holistic Rubric'), ('CHECKLIST', 'Checklist Rubric')], default='ANALYTIC', max_length=15)),
                ('criteria', models.JSONField(default=list, help_text='List of rubric criteria with descriptions and point values')),
                ('total_points', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('is_public', models.BooleanField(default=False, help_text='Available to all faculty')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_rubrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='assignment',
            name='rubric',
            field=models.ForeignKey(blank=True, help_text='Grading rubric for this assignment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assignments', to='assignments.assignmentrubric'),
        ),
        migrations.CreateModel(
            name='AssignmentRubricGrade',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('criteria_scores', models.JSONField(default=dict, help_text='Scores for each rubric criterion')),
                ('total_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('feedback', models.TextField(blank=True, null=True)),
                ('graded_at', models.DateTimeField(auto_now_add=True)),
                ('graded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rubric_grades', to=settings.AUTH_USER_MODEL)),
                ('rubric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='assignments.assignmentrubric')),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rubric_grade', to='assignments.assignmentsubmission')),
            ],
            options={
                'ordering': ['-graded_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('schedule_type', models.CharField(choices=[('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('SEMESTER', 'Per Semester'), ('CUSTOM', 'Custom Interval')], max_length=15)),
                ('interval_days', models.PositiveIntegerField(default=7, help_text='Interval in days for custom schedules')),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_schedules', to=settings.AUTH_USER_MODEL)),
                ('target_courses', models.ManyToManyField(blank=True, related_name='assignment_schedules', to='academics.course')),
                ('target_departments', models.ManyToManyField(blank=True, related_name='assignment_schedules', to='departments.department')),
                ('target_programs', models.ManyToManyField(blank=True, related_name='assignment_schedules', to='academics.academicprogram')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='assignments.assignmenttemplate')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentLearningOutcome',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('outcome_code', models.CharField(help_text='Learning outcome code (e.g., LO1, LO2)', max_length=20)),
                ('description', models.TextField(help_text='Description of the learning outcome')),
                ('bloom_level', models.CharField(choices=[('REMEMBER', 'Remember'), ('UNDERSTAND', 'Understand'), ('APPLY', 'Apply'), ('ANALYZE', 'Analyze'), ('EVALUATE', 'Evaluate'), ('CREATE', 'Create')], max_length=15)),
                ('weight', models.DecimalField(decimal_places=2, default=0, help_text='Weight of this outcome in the assignment (0-100)', max_digits=5)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_outcomes', to='assignments.assignment')),
            ],
            options={
                'ordering': ['outcome_code'],
                'unique_together': {('assignment', 'outcome_code')},
            },
        ),
        migrations.CreateModel(
            name='AssignmentNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_type', models.CharField(choices=[('ASSIGNMENT_CREATED', 'Assignment Created'), ('ASSIGNMENT_DUE_SOON', 'Assignment Due Soon'), ('ASSIGNMENT_OVERDUE', 'Assignment Overdue'), ('SUBMISSION_RECEIVED', 'Submission Received'), ('GRADE_POSTED', 'Grade Posted'), ('FEEDBACK_POSTED', 'Feedback Posted'), ('PEER_REVIEW_ASSIGNED', 'Peer Review Assigned'), ('PLAGIARISM_DETECTED', 'Plagiarism Detected')], max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('context_data', models.JSONField(default=dict, help_text='Additional context data for the notification')),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='assignments.assignment')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['recipient', 'is_read'], name='assignments_recipie_99698e_idx'), models.Index(fields=['notification_type'], name='assignments_notific_bbf4d7_idx')],
            },
        ),
        migrations.CreateModel(
            name='AssignmentPeerReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_rating', models.PositiveIntegerField(help_text='Rating for content quality (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('clarity_rating', models.PositiveIntegerField(help_text='Rating for clarity (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('creativity_rating', models.PositiveIntegerField(help_text='Rating for creativity (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('overall_rating', models.PositiveIntegerField(help_text='Overall rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('strengths', models.TextField(help_text='What the student did well')),
                ('improvements', models.TextField(help_text='Areas for improvement')),
                ('additional_comments', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_reviews', to='assignments.assignment')),
                ('reviewee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_reviews_received', to='students.student')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_reviews_given', to='students.student')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='peer_reviews', to='assignments.assignmentsubmission')),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('assignment', 'reviewer', 'reviewee')},
            },
        ),
    ]
