# Generated by Django 5.1.4 on 2025-09-11 17:57

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0002_initial'),
        ('departments', '0002_initial'),
        ('faculty', '0001_initial'),
        ('students', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EnrollmentRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Rule name', max_length=200)),
                ('rule_type', models.CharField(choices=[('DEPARTMENT', 'Department Based'), ('PROGRAM', 'Program Based'), ('YEAR', 'Year Based'), ('SECTION', 'Section Based'), ('FACULTY', 'Faculty Based'), ('PREREQUISITE', 'Prerequisite Based'), ('CAPACITY', 'Capacity Based')], max_length=20)),
                ('academic_year', models.CharField(help_text='Academic year this rule applies to', max_length=9)),
                ('semester', models.CharField(help_text='Semester this rule applies to', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(help_text='Rule description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_rules', to='academics.academicprogram')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_rules', to='departments.department')),
            ],
            options={
                'verbose_name': 'Enrollment Rule',
                'verbose_name_plural': 'Enrollment Rules',
                'ordering': ['academic_year', 'semester', 'rule_type'],
            },
        ),
        migrations.CreateModel(
            name='StudentEnrollmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(help_text='Academic year', max_length=9)),
                ('semester', models.CharField(help_text='Semester', max_length=20)),
                ('year_of_study', models.PositiveIntegerField(help_text='Current year in the program')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('APPROVED', 'Approved'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('total_credits', models.PositiveIntegerField(default=0, help_text='Total credits for this semester')),
                ('notes', models.TextField(blank=True, help_text='Advisor notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_enrollment_plans', to='academics.academicprogram')),
                ('advisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='advised_enrollment_plans', to='faculty.faculty')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_plans', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Enrollment Plan',
                'verbose_name_plural': 'Student Enrollment Plans',
                'ordering': ['-academic_year', '-semester', 'student__roll_number'],
                'unique_together': {('student', 'academic_year', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='EnrollmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if applicable')),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_enrollment_requests', to=settings.AUTH_USER_MODEL)),
                ('course_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_requests', to='academics.coursesection')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_enrollment_requests', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_requests', to='students.student')),
                ('enrollment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_requests', to='enrollment.studentenrollmentplan')),
            ],
            options={
                'verbose_name': 'Enrollment Request',
                'verbose_name_plural': 'Enrollment Requests',
                'ordering': ['-request_date'],
            },
        ),
        migrations.CreateModel(
            name='WaitlistEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(help_text='Position in waitlist')),
                ('added_date', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('course_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitlist_entries', to='academics.coursesection')),
                ('enrollment_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitlist_entry', to='enrollment.enrollmentrequest')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitlist_entries', to='students.student')),
            ],
            options={
                'verbose_name': 'Waitlist Entry',
                'verbose_name_plural': 'Waitlist Entries',
                'ordering': ['position', 'added_date'],
            },
        ),
        migrations.CreateModel(
            name='CourseAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(help_text='Academic year', max_length=9)),
                ('semester', models.CharField(help_text='Semester', max_length=20)),
                ('assignment_type', models.CharField(choices=[('MANDATORY', 'Mandatory'), ('ELECTIVE', 'Elective'), ('OPTIONAL', 'Optional')], default='MANDATORY', max_length=20)),
                ('year_of_study', models.PositiveIntegerField(help_text='Year in the program when this course is taken')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_assignments', to='academics.academicprogram')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='academics.course')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_assignments', to='departments.department')),
            ],
            options={
                'verbose_name': 'Course Assignment',
                'verbose_name_plural': 'Course Assignments',
                'ordering': ['academic_year', 'semester', 'year_of_study', 'course__code'],
                'unique_together': {('course', 'department', 'academic_program', 'academic_year', 'semester')},
            },
        ),
        migrations.CreateModel(
            name='FacultyAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_date', models.DateField(auto_now_add=True)),
                ('status', models.CharField(choices=[('ASSIGNED', 'Assigned'), ('CONFIRMED', 'Confirmed'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled')], default='ASSIGNED', max_length=20)),
                ('workload_hours', models.PositiveIntegerField(help_text='Weekly workload in hours')),
                ('is_primary', models.BooleanField(default=True, help_text='Whether this is the primary faculty for the section')),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faculty_assignments', to='academics.coursesection')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faculty_assignments', to='faculty.faculty')),
            ],
            options={
                'verbose_name': 'Faculty Assignment',
                'verbose_name_plural': 'Faculty Assignments',
                'ordering': ['-assignment_date', 'faculty__first_name'],
                'unique_together': {('faculty', 'course_section')},
            },
        ),
        migrations.CreateModel(
            name='PlannedCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveIntegerField(default=1, help_text='Priority for enrollment (1=highest)')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this course is mandatory')),
                ('notes', models.TextField(blank=True, help_text='Student or advisor notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planned_enrollments', to='academics.course')),
                ('enrollment_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='planned_courses', to='enrollment.studentenrollmentplan')),
            ],
            options={
                'verbose_name': 'Planned Course',
                'verbose_name_plural': 'Planned Courses',
                'ordering': ['priority', 'course__code'],
                'unique_together': {('enrollment_plan', 'course')},
            },
        ),
        migrations.AddIndex(
            model_name='enrollmentrequest',
            index=models.Index(fields=['course_section', 'status'], name='idx_enrollreq_section_status'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollmentrequest',
            unique_together={('student', 'course_section')},
        ),
        migrations.AddIndex(
            model_name='waitlistentry',
            index=models.Index(fields=['course_section', 'position'], name='idx_waitlist_section_position'),
        ),
        migrations.AlterUniqueTogether(
            name='waitlistentry',
            unique_together={('student', 'course_section')},
        ),
    ]
