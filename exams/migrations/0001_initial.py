# Generated by Django 5.1.4 on 2025-09-11 17:57

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0002_initial'),
        ('faculty', '0001_initial'),
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExamRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Room name/number', max_length=100)),
                ('room_type', models.CharField(choices=[('CLASSROOM', 'Classroom'), ('LAB', 'Laboratory'), ('AUDITORIUM', 'Auditorium'), ('HALL', 'Examination Hall'), ('ONLINE', 'Online Platform'), ('OUTDOOR', 'Outdoor Venue')], max_length=20)),
                ('capacity', models.PositiveIntegerField(help_text='Maximum seating capacity')),
                ('building', models.CharField(blank=True, max_length=100)),
                ('floor', models.PositiveIntegerField(blank=True, null=True)),
                ('is_accessible', models.BooleanField(default=True, help_text='Wheelchair accessible')),
                ('has_projector', models.BooleanField(default=False)),
                ('has_air_conditioning', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Exam Room',
                'verbose_name_plural': 'Exam Rooms',
                'ordering': ['building', 'floor', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ExamSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Exam session name (e.g., Fall 2024 Mid Semester)', max_length=200)),
                ('session_type', models.CharField(choices=[('MID_SEM', 'Mid Semester'), ('END_SEM', 'End Semester'), ('QUIZ', 'Quiz'), ('ASSIGNMENT', 'Assignment'), ('PROJECT', 'Project'), ('PRACTICAL', 'Practical'), ('VIVA', 'Viva Voce'), ('THESIS', 'Thesis Defense')], max_length=20)),
                ('academic_year', models.CharField(help_text='e.g., 2024-2025', max_length=9)),
                ('semester', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8)])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('registration_start', models.DateTimeField(help_text='When students can start registering for exams')),
                ('registration_end', models.DateTimeField(help_text='Last date for exam registration')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Exam Session',
                'verbose_name_plural': 'Exam Sessions',
                'ordering': ['-academic_year', '-semester', 'start_date'],
            },
        ),
        migrations.CreateModel(
            name='ExamRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed')], default='PENDING', max_length=20)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('approved_date', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if applicable')),
                ('special_requirements', models.TextField(blank=True, help_text='Any special requirements or accommodations')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_registrations', to='faculty.faculty')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_registrations', to='students.student')),
            ],
            options={
                'verbose_name': 'Exam Registration',
                'verbose_name_plural': 'Exam Registrations',
            },
        ),
        migrations.CreateModel(
            name='ExamAttendance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('PRESENT', 'Present'), ('ABSENT', 'Absent'), ('LATE', 'Late'), ('DISQUALIFIED', 'Disqualified'), ('MEDICAL_LEAVE', 'Medical Leave')], max_length=20)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Any remarks or notes')),
                ('invigilator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invigilated_exams', to='faculty.faculty')),
                ('exam_registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='attendance', to='exams.examregistration')),
            ],
            options={
                'verbose_name': 'Exam Attendance',
                'verbose_name_plural': 'Exam Attendances',
            },
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('marks_obtained', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grade', models.CharField(blank=True, choices=[('A+', 'A+ (90-100)'), ('A', 'A (80-89)'), ('B+', 'B+ (70-79)'), ('B', 'B (60-69)'), ('C+', 'C+ (50-59)'), ('C', 'C (40-49)'), ('D', 'D (30-39)'), ('F', 'F (Below 30)'), ('I', 'Incomplete'), ('W', 'Withdrawn')], max_length=2)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('is_pass', models.BooleanField(default=False)),
                ('remarks', models.TextField(blank=True, help_text='Additional remarks or comments')),
                ('evaluated_at', models.DateTimeField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False, help_text='Whether result is published to student')),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('evaluated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evaluated_results', to='faculty.faculty')),
                ('exam_registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='exams.examregistration')),
            ],
            options={
                'verbose_name': 'Exam Result',
                'verbose_name_plural': 'Exam Results',
                'ordering': ['-evaluated_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam_type', models.CharField(choices=[('THEORY', 'Theory'), ('PRACTICAL', 'Practical'), ('VIVA', 'Viva Voce'), ('PROJECT', 'Project Presentation'), ('ASSIGNMENT', 'Assignment Submission')], max_length=20)),
                ('title', models.CharField(help_text='Exam title', max_length=200)),
                ('description', models.TextField(blank=True)),
                ('exam_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('duration_minutes', models.PositiveIntegerField(help_text='Exam duration in minutes')),
                ('total_marks', models.PositiveIntegerField(help_text='Total marks for the exam')),
                ('passing_marks', models.PositiveIntegerField(help_text='Minimum marks required to pass')),
                ('max_students', models.PositiveIntegerField(help_text='Maximum students that can take this exam')),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('POSTPONED', 'Postponed')], default='SCHEDULED', max_length=20)),
                ('instructions', models.TextField(blank=True, help_text='Special instructions for students')),
                ('is_online', models.BooleanField(default=False, help_text='Whether this is an online exam')),
                ('online_platform', models.CharField(blank=True, help_text='Platform for online exams', max_length=100)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_schedules', to='academics.course')),
                ('exam_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_schedules', to='exams.examsession')),
            ],
            options={
                'verbose_name': 'Exam Schedule',
                'verbose_name_plural': 'Exam Schedules',
                'ordering': ['exam_date', 'start_time'],
            },
        ),
        migrations.AddField(
            model_name='examregistration',
            name='exam_schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='exams.examschedule'),
        ),
        migrations.CreateModel(
            name='ExamStaffAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('INVIGILATOR', 'Invigilator'), ('CHIEF_INVIGILATOR', 'Chief Invigilator'), ('DEPUTY_CHIEF', 'Deputy Chief Invigilator'), ('OBSERVER', 'Observer'), ('TECHNICAL_SUPPORT', 'Technical Support'), ('SECURITY', 'Security Staff'), ('CLEANING', 'Cleaning Staff')], max_length=20)),
                ('is_available', models.BooleanField(default=True, help_text='Whether staff is available for this duty')),
                ('assigned_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text='Special instructions or notes')),
                ('exam_room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staff_assignments', to='exams.examroom')),
                ('exam_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_assignments', to='exams.examschedule')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_assignments', to='faculty.faculty')),
            ],
            options={
                'verbose_name': 'Exam Staff Assignment',
                'verbose_name_plural': 'Exam Staff Assignments',
            },
        ),
        migrations.CreateModel(
            name='ExamViolation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('violation_type', models.CharField(choices=[('CHEATING', 'Cheating'), ('COPYING', 'Copying from others'), ('UNAUTHORIZED_MATERIAL', 'Using unauthorized material'), ('MOBILE_PHONE', 'Using mobile phone'), ('TALKING', 'Talking during exam'), ('LEAVING_SEAT', 'Leaving seat without permission'), ('LATE_ARRIVAL', 'Late arrival'), ('EARLY_DEPARTURE', 'Early departure'), ('OTHER', 'Other violation')], max_length=30)),
                ('severity', models.CharField(choices=[('MINOR', 'Minor'), ('MODERATE', 'Moderate'), ('MAJOR', 'Major'), ('CRITICAL', 'Critical')], max_length=20)),
                ('description', models.TextField(help_text='Detailed description of the violation')),
                ('reported_at', models.DateTimeField(auto_now_add=True)),
                ('action_taken', models.TextField(blank=True, help_text='Action taken against the violation')),
                ('penalty', models.TextField(blank=True, help_text='Penalty imposed')),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('exam_registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='violations', to='exams.examregistration')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_violations', to='faculty.faculty')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_violations', to='faculty.faculty')),
            ],
            options={
                'verbose_name': 'Exam Violation',
                'verbose_name_plural': 'Exam Violations',
                'ordering': ['-reported_at'],
            },
        ),
        migrations.CreateModel(
            name='HallTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ticket_number', models.CharField(help_text='Unique hall ticket number', max_length=50, unique=True)),
                ('seat_number', models.CharField(blank=True, help_text='Assigned seat number', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('GENERATED', 'Generated'), ('PRINTED', 'Printed'), ('ISSUED', 'Issued to Student'), ('USED', 'Used in Exam'), ('EXPIRED', 'Expired')], default='DRAFT', max_length=20)),
                ('generated_date', models.DateTimeField(auto_now_add=True)),
                ('printed_date', models.DateTimeField(blank=True, null=True)),
                ('issued_date', models.DateTimeField(blank=True, null=True)),
                ('used_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Special instructions or notes')),
                ('exam_registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hall_ticket', to='exams.examregistration')),
                ('exam_room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hall_tickets', to='exams.examroom')),
            ],
            options={
                'verbose_name': 'Hall Ticket',
                'verbose_name_plural': 'Hall Tickets',
                'ordering': ['-generated_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentDue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('due_type', models.CharField(choices=[('TUITION', 'Tuition Fee'), ('EXAM', 'Examination Fee'), ('LIBRARY', 'Library Fine'), ('LAB', 'Laboratory Fee'), ('HOSTEL', 'Hostel Fee'), ('OTHER', 'Other Dues')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('paid_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PAID', 'Paid'), ('PARTIAL', 'Partially Paid'), ('WAIVED', 'Waived'), ('OVERDUE', 'Overdue')], default='PENDING', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dues', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Due',
                'verbose_name_plural': 'Student Dues',
                'ordering': ['-due_date', 'student'],
            },
        ),
        migrations.CreateModel(
            name='ExamRoomAllocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allocated_capacity', models.PositiveIntegerField(help_text='Number of seats allocated for this exam')),
                ('is_primary', models.BooleanField(default=True, help_text='Primary room for the exam')),
                ('notes', models.TextField(blank=True, help_text='Special notes about this allocation')),
                ('exam_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_allocations', to='exams.examroom')),
                ('exam_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_allocations', to='exams.examschedule')),
            ],
            options={
                'verbose_name': 'Exam Room Allocation',
                'verbose_name_plural': 'Exam Room Allocations',
                'unique_together': {('exam_schedule', 'exam_room')},
            },
        ),
        migrations.AddIndex(
            model_name='examregistration',
            index=models.Index(fields=['exam_schedule', 'status'], name='idx_examreg_schedule_status'),
        ),
        migrations.AlterUniqueTogether(
            name='examregistration',
            unique_together={('student', 'exam_schedule')},
        ),
        migrations.AddIndex(
            model_name='examschedule',
            index=models.Index(fields=['exam_session', 'course', 'exam_date'], name='idx_exam_sched_sc_date'),
        ),
        migrations.AddIndex(
            model_name='examschedule',
            index=models.Index(fields=['exam_date'], name='idx_exam_sched_date'),
        ),
        migrations.AlterUniqueTogether(
            name='examstaffassignment',
            unique_together={('exam_schedule', 'faculty')},
        ),
    ]
