# Generated by Django 5.1.4 on 2025-09-19 09:24

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True
    # Squashed initial migration: supersedes 0001_initial and 0002_add_enhanced_models
    # to prevent duplicate table creation during test setup.
    replaces = [
        ('students', '0001_initial'),
        ('students', '0002_add_enhanced_models'),
    ]

    dependencies = [
        ('departments', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(help_text='e.g., 2024-2025', max_length=9, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='CustomField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('label', models.CharField(max_length=200)),
                ('field_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('date', 'Date'), ('email', 'Email'), ('phone', 'Phone'), ('select', 'Select (Dropdown)'), ('multiselect', 'Multi-Select'), ('boolean', 'Yes/No'), ('textarea', 'Long Text'), ('file', 'File Upload'), ('url', 'URL')], max_length=20)),
                ('required', models.BooleanField(default=False)),
                ('help_text', models.TextField(blank=True, null=True)),
                ('default_value', models.TextField(blank=True, null=True)),
                ('choices', models.JSONField(blank=True, help_text='For select/multiselect fields, provide options as JSON array', null=True)),
                ('validation_regex', models.CharField(blank=True, max_length=200, null=True)),
                ('min_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Custom Field',
                'verbose_name_plural': 'Custom Fields',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Religion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('display_name', models.CharField(blank=True, default='', help_text='Display name for the religion', max_length=100, null=True)),
                ('display_order', models.IntegerField(default=0, help_text='Order for display purposes')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BulkAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('operation_type', models.CharField(choices=[('ASSIGN_DEPARTMENT', 'Assign Department'), ('ASSIGN_PROGRAM', 'Assign Academic Program'), ('ASSIGN_YEAR', 'Assign Academic Year'), ('ASSIGN_SEMESTER', 'Assign Semester'), ('ASSIGN_SECTION', 'Assign Section'), ('PROMOTE_YEAR', 'Promote to Next Year'), ('TRANSFER_BATCH', 'Transfer to Different Batch'), ('CUSTOM', 'Custom Assignment')], max_length=20)),
                ('title', models.CharField(help_text='Operation title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Operation description', null=True)),
                ('criteria', models.JSONField(default=dict, help_text='Selection criteria')),
                ('assignment_data', models.JSONField(default=dict, help_text='Assignment data')),
                ('total_students_found', models.PositiveIntegerField(default=0)),
                ('students_updated', models.PositiveIntegerField(default=0)),
                ('students_failed', models.PositiveIntegerField(default=0)),
                ('errors', models.JSONField(blank=True, default=list)),
                ('warnings', models.JSONField(blank=True, default=list)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('PARTIAL', 'Partially Completed')], default='PENDING', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bulk_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Bulk Assignment',
                'verbose_name_plural': 'Bulk Assignments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Caste',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(blank=True, max_length=20, null=True)),
                ('display_name', models.CharField(default='', help_text='Display name for the caste', max_length=100)),
                ('display_order', models.IntegerField(default=0, help_text='Order for display purposes')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_castes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Quota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('display_name', models.CharField(default='', help_text='Display name for the quota', max_length=100)),
                ('display_order', models.IntegerField(default=0, help_text='Order for display purposes')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_quotas', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_quotas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StudentBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(choices=[('1', 'Semester 1'), ('2', 'Semester 2'), ('3', 'Semester 3'), ('4', 'Semester 4'), ('5', 'Semester 5'), ('6', 'Semester 6'), ('7', 'Semester 7'), ('8', 'Semester 8'), ('9', 'Semester 9'), ('10', 'Semester 10')], default='1', max_length=2)),
                ('year_of_study', models.CharField(choices=[('1', '1st Year'), ('2', '2nd Year'), ('3', '3rd Year'), ('4', '4th Year'), ('5', '5th Year')], max_length=1)),
                ('section', models.CharField(choices=[('A', 'Section A'), ('B', 'Section B'), ('C', 'Section C'), ('D', 'Section D'), ('E', 'Section E'), ('F', 'Section F'), ('G', 'Section G'), ('H', 'Section H'), ('I', 'Section I'), ('J', 'Section J'), ('K', 'Section K'), ('L', 'Section L'), ('M', 'Section M'), ('N', 'Section N'), ('O', 'Section O'), ('P', 'Section P'), ('Q', 'Section Q'), ('R', 'Section R'), ('S', 'Section S'), ('T', 'Section T')], max_length=1)),
                ('batch_name', models.CharField(help_text='e.g., CS-2024-1-A', max_length=100)),
                ('batch_code', models.CharField(help_text='Unique batch code', max_length=50, unique=True)),
                ('max_capacity', models.PositiveIntegerField(default=70, help_text='Maximum students per batch')),
                ('current_count', models.PositiveIntegerField(default=0, help_text='Current student count')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_batches', to='academics.academicprogram')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_batches', to='students.academicyear')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_batches', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_batches', to='departments.department')),
            ],
            options={
                'verbose_name': 'Student Batch',
                'verbose_name_plural': 'Student Batches',
                'ordering': ['department', 'academic_year__year', 'year_of_study', 'section'],
                'unique_together': {('department', 'academic_year', 'year_of_study', 'section')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('roll_number', models.CharField(help_text='Unique roll number/student identifier', max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('rank', models.IntegerField(blank=True, help_text='Academic or admission rank', null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('student_mobile', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Student Mobile')),
                ('village', models.CharField(blank=True, max_length=200, null=True)),
                ('address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(default='India', max_length=100)),
                ('aadhar_number', models.CharField(blank=True, help_text='12-digit Aadhar number', max_length=12, null=True, validators=[django.core.validators.RegexValidator(message='Aadhar number must be exactly 12 digits.', regex='^\\d{12}$')])),
                ('subcaste', models.CharField(blank=True, max_length=100, null=True)),
                ('father_name', models.CharField(blank=True, max_length=200, null=True)),
                ('mother_name', models.CharField(blank=True, max_length=200, null=True)),
                ('father_mobile', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Father Mobile')),
                ('mother_mobile', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Mother Mobile')),
                ('enrollment_date', models.DateField(default=django.utils.timezone.now)),
                ('expected_graduation_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('GRADUATED', 'Graduated'), ('SUSPENDED', 'Suspended'), ('DROPPED', 'Dropped Out')], default='ACTIVE', max_length=20)),
                ('guardian_name', models.CharField(blank=True, max_length=200, null=True)),
                ('guardian_phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('guardian_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('guardian_relationship', models.CharField(blank=True, help_text='e.g., Father, Mother, Guardian, etc.', max_length=50, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=200, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True)),
                ('medical_conditions', models.TextField(blank=True, help_text='Any medical conditions or allergies', null=True)),
                ('medications', models.TextField(blank=True, help_text='Current medications', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the student', null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='student_profiles/')),
                ('caste', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='students.caste')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_students', to=settings.AUTH_USER_MODEL)),
                ('quota', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='students.quota')),
                ('religion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='students.religion')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_students', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
                ('student_batch', models.ForeignKey(blank=True, help_text="Student's batch (contains department, program, year, semester, section)", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='students.studentbatch')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='StudentContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contact_type', models.CharField(choices=[('SELF', 'Self'), ('FATHER', 'Father'), ('MOTHER', 'Mother'), ('GUARDIAN', 'Guardian'), ('EMERGENCY', 'Emergency')], max_length=20)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('relationship', models.CharField(blank=True, max_length=50, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='students.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentCustomFieldValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.TextField(blank=True, null=True)),
                ('file_value', models.FileField(blank=True, null=True, upload_to='student_custom_files/')),
                ('custom_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_values', to='students.customfield')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_field_values', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Custom Field Value',
                'verbose_name_plural': 'Student Custom Field Values',
            },
        ),
        migrations.CreateModel(
            name='StudentDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document_type', models.CharField(choices=[('BIRTH_CERT', 'Birth Certificate'), ('TRANSCRIPT', 'Academic Transcript'), ('MEDICAL', 'Medical Record'), ('IMMUNIZATION', 'Immunization Record'), ('PHOTO_ID', 'Photo ID'), ('OTHER', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('document_file', models.FileField(upload_to='student_documents/')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='students.student')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Document',
                'verbose_name_plural': 'Student Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentEnrollmentHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year_of_study', models.CharField(choices=[('1', '1st Year'), ('2', '2nd Year'), ('3', '3rd Year'), ('4', '4th Year'), ('5', '5th Year')], default='1', max_length=1)),
                ('semester', models.CharField(choices=[('1', 'Semester 1'), ('2', 'Semester 2'), ('3', 'Semester 3'), ('4', 'Semester 4'), ('5', 'Semester 5'), ('6', 'Semester 6'), ('7', 'Semester 7'), ('8', 'Semester 8'), ('9', 'Semester 9'), ('10', 'Semester 10')], default='1', max_length=2)),
                ('academic_year', models.CharField(help_text='e.g., 2023-2024', max_length=9)),
                ('enrollment_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('GRADUATED', 'Graduated'), ('SUSPENDED', 'Suspended'), ('DROPPED', 'Dropped Out')], max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_history', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Enrollment History',
                'verbose_name_plural': 'Student Enrollment Histories',
                'ordering': ['-enrollment_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentIdentifier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id_type', models.CharField(choices=[('AADHAR', 'Aadhar'), ('OTHER', 'Other')], max_length=20)),
                ('identifier', models.CharField(max_length=255)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='students.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentImport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('filename', models.CharField(max_length=255)),
                ('file_size', models.IntegerField(help_text='File size in bytes')),
                ('total_rows', models.IntegerField(default=0)),
                ('success_count', models.IntegerField(default=0)),
                ('error_count', models.IntegerField(default=0)),
                ('warning_count', models.IntegerField(default=0)),
                ('skip_errors', models.BooleanField(default=False)),
                ('create_login', models.BooleanField(default=True)),
                ('update_existing', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('errors', models.JSONField(blank=True, default=list)),
                ('warnings', models.JSONField(blank=True, default=list)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_imports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Import',
                'verbose_name_plural': 'Student Imports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentRepresentative',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('representative_type', models.CharField(choices=[('CR', 'Class Representative'), ('LR', 'Ladies Representative'), ('SPORTS', 'Sports Representative'), ('CULTURAL', 'Cultural Representative'), ('ACADEMIC', 'Academic Representative'), ('HOSTEL', 'Hostel Representative'), ('LIBRARY', 'Library Representative'), ('PLACEMENT', 'Placement Representative')], help_text='Type of representative role', max_length=20)),
                ('semester', models.CharField(help_text='Semester (e.g., 1, 2, 3, 4, 5, 6, 7, 8)', max_length=10)),
                ('year_of_study', models.CharField(choices=[('1', '1st Year'), ('2', '2nd Year'), ('3', '3rd Year'), ('4', '4th Year'), ('5', '5th Year')], help_text='Year of study this representative serves', max_length=1)),
                ('section', models.CharField(choices=[('A', 'Section A'), ('B', 'Section B'), ('C', 'Section C'), ('D', 'Section D'), ('E', 'Section E'), ('F', 'Section F'), ('G', 'Section G'), ('H', 'Section H'), ('I', 'Section I'), ('J', 'Section J'), ('K', 'Section K'), ('L', 'Section L'), ('M', 'Section M'), ('N', 'Section N'), ('O', 'Section O'), ('P', 'Section P'), ('Q', 'Section Q'), ('R', 'Section R'), ('S', 'Section S'), ('T', 'Section T')], help_text='Section this representative serves', max_length=1)),
                ('responsibilities', models.TextField(blank=True, help_text='Key responsibilities and duties')),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email for representative matters', max_length=254)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number', max_length=15)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this representative is currently active')),
                ('start_date', models.DateField(default=django.utils.timezone.now, help_text='Date when representation started')),
                ('end_date', models.DateField(blank=True, help_text='Date when representation ended (if applicable)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this representative')),
                ('academic_program', models.ForeignKey(help_text='Academic program this representative serves', on_delete=django.db.models.deletion.CASCADE, related_name='representatives', to='academics.academicprogram')),
                ('academic_year', models.ForeignKey(help_text='Academic year for this representation', on_delete=django.db.models.deletion.CASCADE, related_name='representatives', to='students.academicyear')),
                ('department', models.ForeignKey(help_text='Department this representative serves', on_delete=django.db.models.deletion.CASCADE, related_name='representatives', to='departments.department')),
                ('student', models.OneToOneField(help_text='Student who holds this representative position', on_delete=django.db.models.deletion.CASCADE, related_name='representative_role', to='students.student')),
            ],
            options={
                'verbose_name': 'Student Representative',
                'verbose_name_plural': 'Student Representatives',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Title of the feedback', max_length=200)),
                ('feedback_type', models.CharField(choices=[('ACADEMIC', 'Academic Issue'), ('INFRASTRUCTURE', 'Infrastructure Issue'), ('HOSTEL', 'Hostel Issue'), ('LIBRARY', 'Library Issue'), ('SPORTS', 'Sports Facility Issue'), ('CULTURAL', 'Cultural Activity Issue'), ('PLACEMENT', 'Placement Issue'), ('GENERAL', 'General Feedback'), ('COMPLAINT', 'Complaint'), ('SUGGESTION', 'Suggestion')], help_text='Type of feedback or issue', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of the feedback')),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', help_text='Priority level of the feedback', max_length=10)),
                ('status', models.CharField(choices=[('SUBMITTED', 'Submitted'), ('UNDER_REVIEW', 'Under Review'), ('IN_PROGRESS', 'In Progress'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed'), ('REJECTED', 'Rejected')], default='SUBMITTED', help_text='Current status of the feedback', max_length=20)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about resolution or action taken', null=True)),
                ('resolved_date', models.DateTimeField(blank=True, help_text='Date when feedback was resolved', null=True)),
                ('follow_up_required', models.BooleanField(default=False, help_text='Whether follow-up is required')),
                ('follow_up_date', models.DateTimeField(blank=True, help_text='Date for follow-up', null=True)),
                ('attachments', models.JSONField(blank=True, default=list, help_text='List of attachment file paths')),
                ('is_anonymous', models.BooleanField(default=False, help_text='Whether this feedback is anonymous')),
                ('resolved_by', models.ForeignKey(blank=True, help_text='User who resolved this feedback', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_feedback', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(help_text='Student who submitted this feedback', on_delete=django.db.models.deletion.CASCADE, related_name='feedback_submissions', to='students.student')),
                ('representative', models.ForeignKey(blank=True, help_text='Representative handling this feedback', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='handled_feedback', to='students.studentrepresentative')),
            ],
            options={
                'verbose_name': 'Student Feedback',
                'verbose_name_plural': 'Student Feedback',
                'ordering': ['-created_at', 'priority'],
            },
        ),
        migrations.CreateModel(
            name='StudentRepresentativeActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity_type', models.CharField(choices=[('MEETING', 'Meeting'), ('EVENT', 'Event Organization'), ('FEEDBACK', 'Feedback Collection'), ('COMPLAINT', 'Complaint Handling'), ('ANNOUNCEMENT', 'Announcement'), ('COORDINATION', 'Coordination'), ('REPORTING', 'Reporting'), ('OTHER', 'Other')], help_text='Type of activity performed', max_length=20)),
                ('title', models.CharField(help_text='Title of the activity', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the activity')),
                ('date_performed', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when activity was performed')),
                ('participants_count', models.PositiveIntegerField(default=0, help_text='Number of participants involved')),
                ('outcome', models.TextField(blank=True, help_text='Outcome or result of the activity')),
                ('attachments', models.JSONField(blank=True, default=list, help_text='List of attachment URLs or file paths')),
                ('is_public', models.BooleanField(default=True, help_text='Whether this activity is visible to all students')),
                ('representative', models.ForeignKey(help_text='Representative who performed this activity', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='students.studentrepresentative')),
            ],
            options={
                'verbose_name': 'Representative Activity',
                'verbose_name_plural': 'Representative Activities',
                'ordering': ['-date_performed'],
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Fall 2024, Spring 2025', max_length=50)),
                ('semester_type', models.CharField(choices=[('ODD', 'Odd Semester (Fall)'), ('EVEN', 'Even Semester (Spring)'), ('SUMMER', 'Summer Semester')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='semesters', to='students.academicyear')),
            ],
            options={
                'ordering': ['academic_year', 'semester_type'],
                'unique_together': {('academic_year', 'semester_type')},
            },
        ),
        migrations.CreateModel(
            name='StudentAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address_type', models.CharField(choices=[('CURRENT', 'Current'), ('PERMANENT', 'Permanent'), ('MAILING', 'Mailing')], max_length=20)),
                ('address_line1', models.CharField(max_length=255)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(default='India', max_length=100)),
                ('is_primary', models.BooleanField(default=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='students.student')),
            ],
            options={
                'indexes': [models.Index(fields=['student', 'address_type'], name='students_st_student_704649_idx')],
                'unique_together': {('student', 'address_type', 'is_primary')},
            },
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_batch'], name='idx_student_batch'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(condition=models.Q(('status', 'ACTIVE')), fields=['status'], name='idx_student_status_active'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['created_at'], name='students_st_created_78a19f_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['updated_at'], name='students_st_updated_69dec6_idx'),
        ),
        migrations.AddIndex(
            model_name='studentcontact',
            index=models.Index(fields=['student', 'contact_type'], name='students_st_student_5e110b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentcontact',
            unique_together={('student', 'contact_type', 'is_primary')},
        ),
        migrations.AlterUniqueTogether(
            name='studentcustomfieldvalue',
            unique_together={('student', 'custom_field')},
        ),
        migrations.AddIndex(
            model_name='studentdocument',
            index=models.Index(fields=['document_type', 'student'], name='students_st_documen_bafc7b_idx'),
        ),
        migrations.AddIndex(
            model_name='studentidentifier',
            index=models.Index(fields=['student', 'id_type', 'is_primary'], name='students_st_student_a8cf9f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentidentifier',
            unique_together={('id_type', 'identifier')},
        ),
        migrations.AddIndex(
            model_name='studentrepresentative',
            index=models.Index(fields=['representative_type', 'is_active'], name='students_st_represe_ccbc6a_idx'),
        ),
        migrations.AddIndex(
            model_name='studentrepresentative',
            index=models.Index(fields=['academic_year', 'semester'], name='students_st_academi_582199_idx'),
        ),
        migrations.AddIndex(
            model_name='studentrepresentative',
            index=models.Index(fields=['department', 'academic_program'], name='students_st_departm_b77b38_idx'),
        ),
        migrations.AddIndex(
            model_name='studentrepresentative',
            index=models.Index(fields=['year_of_study', 'section'], name='students_st_year_of_523ae0_idx'),
        ),
        migrations.AddIndex(
            model_name='studentfeedback',
            index=models.Index(fields=['student', 'status'], name='students_st_student_58c509_idx'),
        ),
        migrations.AddIndex(
            model_name='studentfeedback',
            index=models.Index(fields=['feedback_type', 'priority'], name='students_st_feedbac_67cdfc_idx'),
        ),
        migrations.AddIndex(
            model_name='studentfeedback',
            index=models.Index(fields=['status', 'created_at'], name='students_st_status_978891_idx'),
        ),
        migrations.AddIndex(
            model_name='studentrepresentativeactivity',
            index=models.Index(fields=['representative', 'activity_type'], name='students_st_represe_7ac886_idx'),
        ),
        migrations.AddIndex(
            model_name='studentrepresentativeactivity',
            index=models.Index(fields=['date_performed'], name='students_st_date_pe_5bcffd_idx'),
        ),
        migrations.AddIndex(
            model_name='studentrepresentativeactivity',
            index=models.Index(fields=['is_public'], name='students_st_is_publ_d933f2_idx'),
        ),
    ]
