# Generated by Django 5.1.4 on 2025-09-11 17:57

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FeeCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Fee Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FeeStructure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('academic_year', models.CharField(choices=[('2023-2024', '2023-2024'), ('2024-2025', '2024-2025'), ('2025-2026', '2025-2026'), ('2026-2027', '2026-2027')], max_length=9)),
                ('grade_level', models.CharField(choices=[('1', 'Grade 1'), ('2', 'Grade 2'), ('3', 'Grade 3'), ('4', 'Grade 4'), ('5', 'Grade 5'), ('6', 'Grade 6'), ('7', 'Grade 7'), ('8', 'Grade 8'), ('9', 'Grade 9'), ('10', 'Grade 10'), ('11', 'Grade 11'), ('12', 'Grade 12')], max_length=2)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['academic_year', 'grade_level'],
                'unique_together': {('academic_year', 'grade_level')},
            },
        ),
        migrations.CreateModel(
            name='FeeStructureDetail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('frequency', models.CharField(choices=[('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('SEMESTER', 'Semester'), ('ANNUAL', 'Annual'), ('ONE_TIME', 'One Time')], max_length=20)),
                ('is_optional', models.BooleanField(default=False)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('late_fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('late_fee_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('fee_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='structure_details', to='fees.feecategory')),
                ('fee_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_details', to='fees.feestructure')),
            ],
            options={
                'ordering': ['fee_category__display_order'],
                'unique_together': {('fee_structure', 'fee_category')},
            },
        ),
        migrations.CreateModel(
            name='StudentFee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.CharField(max_length=9)),
                ('due_date', models.DateField()),
                ('amount_due', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('late_fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PAID', 'Paid'), ('PARTIAL', 'Partially Paid'), ('OVERDUE', 'Overdue'), ('WAIVED', 'Waived'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('fee_structure_detail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_fees', to='fees.feestructuredetail')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fees', to='students.student')),
            ],
            options={
                'ordering': ['due_date', 'student__roll_number'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CHEQUE', 'Cheque'), ('BANK_TRANSFER', 'Bank Transfer'), ('ONLINE', 'Online Payment'), ('CARD', 'Credit/Debit Card'), ('UPI', 'UPI'), ('OTHER', 'Other')], max_length=20)),
                ('payment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded')], default='PENDING', max_length=20)),
                ('receipt_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('collected_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collected_payments', to=settings.AUTH_USER_MODEL)),
                ('student_fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='fees.studentfee')),
            ],
            options={
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='FeeWaiver',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('waiver_type', models.CharField(choices=[('SCHOLARSHIP', 'Scholarship'), ('FINANCIAL_AID', 'Financial Aid'), ('MERIT', 'Merit Based'), ('SPORTS', 'Sports Quota'), ('DISABILITY', 'Disability'), ('OTHER', 'Other')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('reason', models.TextField()),
                ('approved_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_waivers', to=settings.AUTH_USER_MODEL)),
                ('student_fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waivers', to='fees.studentfee')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FeeReceipt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('receipt_number', models.CharField(max_length=50, unique=True)),
                ('generated_date', models.DateTimeField(auto_now_add=True)),
                ('is_printed', models.BooleanField(default=False)),
                ('printed_date', models.DateTimeField(blank=True, null=True)),
                ('generated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_receipts', to=settings.AUTH_USER_MODEL)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receipts', to='fees.payment')),
                ('student_fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receipts', to='fees.studentfee')),
            ],
            options={
                'ordering': ['-generated_date'],
            },
        ),
        migrations.CreateModel(
            name='FeeDiscount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discount_type', models.CharField(choices=[('EARLY_PAYMENT', 'Early Payment'), ('SIBLING', 'Sibling Discount'), ('STAFF_CHILD', 'Staff Child'), ('BULK_PAYMENT', 'Bulk Payment'), ('LOYALTY', 'Loyalty Discount'), ('OTHER', 'Other')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('reason', models.TextField()),
                ('valid_until', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('student_fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='fees.studentfee')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='studentfee',
            index=models.Index(fields=['student', 'status'], name='fees_studen_student_6cb40a_idx'),
        ),
        migrations.AddIndex(
            model_name='studentfee',
            index=models.Index(fields=['due_date', 'status'], name='fees_studen_due_dat_021b9d_idx'),
        ),
        migrations.AddConstraint(
            model_name='studentfee',
            constraint=models.CheckConstraint(condition=models.Q(('amount_due__gte', 0)), name='student_fee_amount_due_nonnegative'),
        ),
        migrations.AddConstraint(
            model_name='studentfee',
            constraint=models.CheckConstraint(condition=models.Q(('amount_paid__gte', 0)), name='student_fee_amount_paid_nonnegative'),
        ),
        migrations.AddConstraint(
            model_name='studentfee',
            constraint=models.CheckConstraint(condition=models.Q(('late_fee_amount__gte', 0)), name='student_fee_late_fee_nonnegative'),
        ),
        migrations.AlterUniqueTogether(
            name='studentfee',
            unique_together={('student', 'fee_structure_detail', 'academic_year')},
        ),
    ]
