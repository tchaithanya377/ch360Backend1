# Generated by Django 5.1.4 on 2025-09-10 07:50

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DepartmentAnnouncement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Announcement title', max_length=200)),
                ('content', models.TextField(help_text='Announcement content')),
                ('announcement_type', models.CharField(choices=[('GENERAL', 'General'), ('ACADEMIC', 'Academic'), ('EVENT', 'Event'), ('DEADLINE', 'Deadline'), ('EMERGENCY', 'Emergency'), ('MAINTENANCE', 'Maintenance')], default='GENERAL', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=10)),
                ('is_published', models.BooleanField(default=False, help_text='Whether announcement is published')),
                ('publish_date', models.DateTimeField(blank=True, help_text='Date when announcement was published', null=True)),
                ('expiry_date', models.DateTimeField(blank=True, help_text='Date when announcement expires', null=True)),
                ('target_audience', models.CharField(default='ALL', help_text='Target audience (ALL, FACULTY, STUDENTS, etc.)', max_length=100)),
            ],
            options={
                'verbose_name': 'Department Announcement',
                'verbose_name_plural': 'Department Announcements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DepartmentDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Document title', max_length=200)),
                ('document_type', models.CharField(choices=[('POLICY', 'Policy Document'), ('PROCEDURE', 'Procedure Document'), ('FORM', 'Form'), ('REPORT', 'Report'), ('MANUAL', 'Manual'), ('GUIDELINE', 'Guideline'), ('CERTIFICATE', 'Certificate'), ('OTHER', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True, help_text='Document description', null=True)),
                ('file', models.FileField(help_text='Document file', upload_to='department_documents/')),
                ('version', models.CharField(default='1.0', help_text='Document version', max_length=20)),
                ('is_public', models.BooleanField(default=False, help_text='Whether document is public')),
            ],
            options={
                'verbose_name': 'Department Document',
                'verbose_name_plural': 'Department Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DepartmentEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Event title', max_length=200)),
                ('description', models.TextField(help_text='Event description')),
                ('event_type', models.CharField(choices=[('SEMINAR', 'Seminar'), ('WORKSHOP', 'Workshop'), ('CONFERENCE', 'Conference'), ('MEETING', 'Meeting'), ('CELEBRATION', 'Celebration'), ('COMPETITION', 'Competition'), ('EXHIBITION', 'Exhibition'), ('OTHER', 'Other')], max_length=20)),
                ('start_date', models.DateTimeField(help_text='Event start date and time')),
                ('end_date', models.DateTimeField(help_text='Event end date and time')),
                ('location', models.CharField(help_text='Event location', max_length=200)),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('CONFIRMED', 'Confirmed'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('POSTPONED', 'Postponed')], default='PLANNED', max_length=20)),
                ('is_public', models.BooleanField(default=True, help_text='Whether event is public')),
                ('max_attendees', models.PositiveIntegerField(blank=True, help_text='Maximum number of attendees', null=True)),
                ('registration_required', models.BooleanField(default=False, help_text='Whether registration is required')),
                ('registration_deadline', models.DateTimeField(blank=True, help_text='Registration deadline', null=True)),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email for event', max_length=254, null=True)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone for event', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
            ],
            options={
                'verbose_name': 'Department Event',
                'verbose_name_plural': 'Department Events',
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='DepartmentResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Resource name', max_length=200)),
                ('resource_type', models.CharField(choices=[('LABORATORY', 'Laboratory'), ('LIBRARY', 'Library'), ('EQUIPMENT', 'Equipment'), ('SOFTWARE', 'Software'), ('FACILITY', 'Facility'), ('VEHICLE', 'Vehicle'), ('OTHER', 'Other')], max_length=20)),
                ('description', models.TextField(help_text='Resource description')),
                ('location', models.CharField(help_text='Resource location', max_length=200)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_USE', 'In Use'), ('MAINTENANCE', 'Under Maintenance'), ('OUT_OF_ORDER', 'Out of Order'), ('RETIRED', 'Retired')], default='AVAILABLE', max_length=20)),
                ('purchase_date', models.DateField(blank=True, help_text='Date when resource was purchased', null=True)),
                ('warranty_expiry', models.DateField(blank=True, help_text='Warranty expiry date', null=True)),
                ('maintenance_schedule', models.TextField(blank=True, help_text='Maintenance schedule', null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Resource cost', max_digits=12, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
            ],
            options={
                'verbose_name': 'Department Resource',
                'verbose_name_plural': 'Department Resources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Full department name', max_length=200, unique=True)),
                ('short_name', models.CharField(help_text='Short name or abbreviation (e.g., CS, ME, EE)', max_length=50, unique=True)),
                ('code', models.CharField(help_text='Department code for system use (e.g., CS001, ME002)', max_length=10, unique=True)),
                ('department_type', models.CharField(choices=[('ACADEMIC', 'Academic Department'), ('ADMINISTRATIVE', 'Administrative Department'), ('RESEARCH', 'Research Department'), ('SERVICE', 'Service Department'), ('SUPPORT', 'Support Department')], default='ACADEMIC', help_text='Type of department', max_length=20)),
                ('email', models.EmailField(help_text='Department email address', max_length=254)),
                ('phone', models.CharField(help_text='Department phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('fax', models.CharField(blank=True, help_text='Department fax number', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('building', models.CharField(help_text='Building name or number', max_length=100)),
                ('floor', models.CharField(blank=True, help_text='Floor number or name', max_length=20, null=True)),
                ('room_number', models.CharField(blank=True, help_text='Room number', max_length=20, null=True)),
                ('address_line1', models.CharField(blank=True, help_text='Address line 1', max_length=255, null=True)),
                ('address_line2', models.CharField(blank=True, help_text='Address line 2', max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('established_date', models.DateField(help_text='Date when department was established')),
                ('accreditation_status', models.CharField(blank=True, help_text='Accreditation status (e.g., NAAC, NBA)', max_length=50, null=True)),
                ('accreditation_valid_until', models.DateField(blank=True, help_text='Accreditation valid until date', null=True)),
                ('description', models.TextField(help_text='Department description and overview')),
                ('mission', models.TextField(blank=True, help_text='Department mission statement', null=True)),
                ('vision', models.TextField(blank=True, help_text='Department vision statement', null=True)),
                ('objectives', models.TextField(blank=True, help_text='Department objectives', null=True)),
                ('max_faculty_capacity', models.PositiveIntegerField(default=50, help_text='Maximum faculty capacity')),
                ('max_student_capacity', models.PositiveIntegerField(default=500, help_text='Maximum student capacity')),
                ('current_faculty_count', models.PositiveIntegerField(default=0, help_text='Current faculty count')),
                ('current_student_count', models.PositiveIntegerField(default=0, help_text='Current student count')),
                ('annual_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Annual budget in local currency', max_digits=15, null=True)),
                ('budget_year', models.CharField(blank=True, help_text='Budget year (e.g., 2024-2025)', max_length=9, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('MERGED', 'Merged'), ('DISSOLVED', 'Dissolved')], default='ACTIVE', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether department is currently active')),
                ('website_url', models.URLField(blank=True, help_text='Department website URL', null=True)),
                ('social_media_links', models.JSONField(blank=True, default=dict, help_text='Social media links (JSON format)')),
                ('logo', models.ImageField(blank=True, help_text='Department logo', null=True, upload_to='department_logos/')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_departments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['name'],
            },
        ),
    ]
